package sss.reasoner;

import sss.scheduler.objects.SingleHourLesson;
import sss.scheduler.objects.DoubleHourLesson;
import sss.scheduler.objects.Subject;
import sss.scheduler.objects.Schedule;
import sss.scheduler.objects.Teacher;
import sss.scheduler.objects.LessonHour;
import sss.scheduler.objects.Classroom;
import sss.scheduler.objects.Availability;
import sss.scheduler.objects.ClassInSchool;

/**
 * Rule base used to allocate a lesson object to a classroom and time slot.
 */
public ruleBase ClassroomTimeslotAllocationKB {

  rule allocationRule1 {
    declarations
      Schedule schedule;
  	  DoubleHourLesson lessonToAllocate;
  	  Classroom classroom;
  	  LessonHour hour;
  	localdecl
   	  Teacher teacher = lessonToAllocate.getTeacher();
  	  ClassInSchool classToAllocate = lessonToAllocate.getClassInSchool();
  	  LessonHour nextHour = hour.getNextHour();
    conditions
  	  schedule.containsLessonInSchedulingSet(lessonToAllocate); // Eigenlijk overbodig
  	  !lessonToAllocate.isAllocatedToTimeslot(); // Eigenlijk overbodig
  	  hour.hasNextHour();
  	  classroom.isSuitedFor(lessonToAllocate);
  	  classroom.isAvailable(hour);
  	  classroom.isAvailable(nextHour);
  	  classToAllocate.isAvailable(hour);
  	  classToAllocate.isAvailable(nextHour);
  	  teacher.isSuitedFor(lessonToAllocate);
  	  teacher.getAvailability(hour) == Availability.AVAILABLE;
  	  teacher.getAvailability(nextHour) == Availability.AVAILABLE;
      teacher.getScheduledValue(hour) == Availability.AVAILABLE;
      teacher.getScheduledValue(nextHour) == Availability.AVAILABLE;
    actions
      System.out.println("allocationRule1 fired");
  	  schedule.scheduleDoubleHourLesson(lessonToAllocate, classroom, classToAllocate, teacher, hour, nextHour);
  	  modified(schedule);
  	  modified(classroom);
  	  modified(classToAllocate);
  	  modified(teacher);
  	  retract(lessonToAllocate);
  }

  rule allocationRule2 {
    declarations
      Schedule schedule;
  	  SingleHourLesson lessonToAllocate;
  	  Classroom classroom;
  	  LessonHour hour;
  	localdecl
  	  Teacher teacher = lessonToAllocate.getTeacher();
  	  ClassInSchool classToAllocate = lessonToAllocate.getClassInSchool();
    conditions
  	  schedule.containsLessonInSchedulingSet(lessonToAllocate); // Eigenlijk overbodig
  	  !lessonToAllocate.isAllocatedToTimeslot(); // Eigenlijk overbodig
  	  teacher.isSuitedFor(lessonToAllocate);
  	  classroom.isAvailable(hour);
  	  classroom.isSuitedFor(lessonToAllocate);
  	  classToAllocate.isAvailable(hour);
  	  teacher.getAvailability(hour) == Availability.AVAILABLE;
      teacher.getScheduledValue(hour) == Availability.AVAILABLE;
    actions
      System.out.println("allocationRule2 fired");
  	  schedule.scheduleSingleHourLesson(lessonToAllocate, classroom, classToAllocate, teacher, hour);
  	  modified(schedule);
  	  modified(classroom);
  	  modified(classToAllocate);
  	  modified(teacher);
  	  retract(lessonToAllocate);
  }
  
  rule allocationRule3 {
    declarations
      Schedule schedule;
  	  SingleHourLesson lessonToAllocate;
  	  Classroom classroom;
  	  LessonHour hour;
  	localdecl
  	  ClassInSchool classToAllocate = lessonToAllocate.getClassInSchool();
  	  String subjectName = lessonToAllocate.getSubject().getCode();
  	  Teacher teacher = lessonToAllocate.getTeacher();
    conditions
  	  schedule.containsLessonInSchedulingSet(lessonToAllocate); // Eigenlijk overbodig
  	  !lessonToAllocate.isAllocatedToTimeslot(); // Eigenlijk overbodig
  	  teacher.isSuitedFor(lessonToAllocate); // Eigenlijk overbodig
  	  !subjectName.equals("LO");
  	  !subjectName.equals("HV");
  	  !subjectName.equals("IN");
  	  classroom.isAvailable(hour);
  	  !classroom.isSuitedFor(lessonToAllocate);
  	  classroom.isSuitedForGeneralUse();
  	  classToAllocate.isAvailable(hour);
  	  teacher.getAvailability(hour) == Availability.AVAILABLE;
      teacher.getScheduledValue(hour) == Availability.AVAILABLE;
    actions
      System.out.println("allocationRule3 fired");
  	  schedule.scheduleSingleHourLesson(lessonToAllocate, classroom, classToAllocate, teacher, hour);
  	  modified(schedule);
  	  modified(classroom);
  	  modified(classToAllocate);
  	  modified(teacher);
  	  retract(lessonToAllocate);
  }
  
}